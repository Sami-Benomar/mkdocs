{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Sitio de Sami Benomar Megri","text":"<p>For full documentation visit mkdocs.org.</p>"},{"location":"#commands","title":"Commands","text":"<ul> <li><code>mkdocs new [dir-name]</code> - Create a new project.</li> <li><code>mkdocs serve</code> - Start the live-reloading docs server.</li> <li><code>mkdocs build</code> - Build the documentation site.</li> <li><code>mkdocs -h</code> - Print help message and exit.</li> </ul>"},{"location":"#project-layout","title":"Project layout","text":"<pre><code>mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\n</code></pre>"},{"location":"Practica5-1/","title":"Practica 5-1","text":""},{"location":"Practica5-1/#estructura-del-repositorio","title":"Estructura del repositorio","text":"<ul> <li> <p><code>scripts/</code>:  </p> </li> <li> <p><code>.env</code>:   Archivo de variables de entorno.</p> </li> <li> <p><code>docker-compose.yml</code>:   Configura estos 4 servicios principales:         - \ud83d\udc2c MySQL: Base de datos.         - \ud83d\udda5\ufe0f phpMyAdmin: Interfaz web para gestionar MySQL.         - \ud83d\uded2 Prestashop: Implementaci\u00f3n de la aplicaci\u00f3n web.         - \ud83d\udd12 HTTPS-Portal: Proxy inverso con SSL autom\u00e1tico.</p> </li> </ul> <p> </p>"},{"location":"Practica5-2/","title":"Practica5-2","text":""},{"location":"Practica5-2/#docker-composeyml","title":"docker-compose.yml","text":"<p>Este archivo de configuraci\u00f3n define un entorno para desplegar una aplicaci\u00f3n WordPress con una base de datos MySQL, phpMyAdmin para gestionar la base de datos, y un servidor HTTPS para conexiones seguras.</p> <p>\ud83d\udc2c MySQL: Base de datos para WordPress. Se configura con variables de entorno y un volumen para almacenar datos. \ud83d\udda5\ufe0f WordPress: Aplicaci\u00f3n principal. Depende de MySQL y usa un volumen para almacenar archivos. \ud83d\uddc3\ufe0f phpMyAdmin: Herramienta para gestionar la base de datos MySQL. Depende de MySQL. \u2709\ufe0f HTTPS-Portal: Servidor que maneja conexiones seguras (HTTP/HTTPS) para WordPress.</p>"},{"location":"Practica5-2/#https-portal","title":"https-portal","text":"<p>El servicio <code>https-portal</code> es un contenedor que act\u00faa como un servidor proxy inverso para manejar conexiones seguras (HTTPS) y redirigirlas a la aplicaci\u00f3n WordPress. Su funci\u00f3n principal es:</p> <pre><code>https-portal:\n  environment:\n    DOMAINS: \"${DOMAIN} -&gt; http://wordpress:8080\"\n    STAGE: 'production'\n</code></pre> <ul> <li><code>DOMAINS</code>: Define el dominio y redirige el tr\u00e1fico a WordPress.</li> <li><code>STAGE</code>: En modo <code>production</code>, habilita HTTPS con certificados v\u00e1lidos.</li> </ul> <p></p>"},{"location":"Practica5-4/","title":"Practica 5-4","text":""},{"location":"Practica5-4/#docker-nginx-2048","title":"Docker Nginx 2048","text":"<p>Para la creaci\u00f3n de esta imagen he creado el siguiente Dockerfile:</p> <pre><code>    FROM ubuntu:latest\n\n    RUN apt-get update &amp;&amp; apt-get install -y nginx git &amp;&amp; \\\n        rm -rf /var/lib/apt/lists/*\n\n    RUN rm -rf /var/www/html/*\n\n    RUN git clone https://github.com/josejuansanchez/2048 /var/www/html/\n\n    EXPOSE 80\n\n    CMD [\"nginx\", \"-g\", \"daemon off;\"]\n\n</code></pre>"},{"location":"Practica5-4/#comandos-para-construir-la-imagen","title":"Comandos para construir la imagen","text":"<pre><code>    docker build -t &lt;tu-usuario&gt; .\n</code></pre> <p>2.</p> <pre><code>    docker login -u &lt;tu-usuario&gt;\n</code></pre> <p>3.</p> <pre><code>    dock-er tag nginx-2048 tu-usuario/nginx-2048:1.0\n    docker tag nginx-2048 tu-usuario/nginx-2048:latest   \n</code></pre> <p>4.</p> <pre><code>    docker push tu-usuario/nginx-2048:latest\n    docker push tu-usuario/nginx-2048:1.0\n</code></pre> <p></p>"},{"location":"Practica5-4/#docker-compose","title":"Docker Compose","text":"<pre><code>    services:\n        web:\n            image: samibenomar/nginx-2048:latest\n            ports:\n                - \"80:80\"\n</code></pre>"},{"location":"Practica5-4/#automatizacion-con-github-actions","title":"Automatizaci\u00f3n con GitHub Actions","text":"<p>En los secretos del repositorio creo dos secretos que son el usuario de doker.com y el token de seguridad.</p> <pre><code>    name: Docker Publish\n\n    on:\n    push:\n        branches:\n        - main\n\n    jobs:\n    push_to_registry:\n        name: Push Docker image a Docker Hub\n        runs-on: ubuntu-latest\n\n        steps:\n        - name: Comprueba repositorios\n            uses: actions/checkout@v2\n\n        - name: Login a Docker Hub\n            run: echo \"${{ secrets.DOCKERHUB_TOKEN }}\" | docker login -u \"${{ secrets.DOCKERHUB_USERNAME }}\" --password-stdin\n\n        - name: Build y push Docker image\n            run: |\n            docker build -t ${{ secrets.DOCKERHUB_USERNAME }}/nginx-2048:latest ./image\n            docker push ${{ secrets.DOCKERHUB_USERNAME }}/nginx-2048:latest\n</code></pre>"},{"location":"about/","title":"Acerca de","text":"<p>texto de ejemplo</p>"}]}